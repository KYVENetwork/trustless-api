syntax = "proto3";

import "google/protobuf/any.proto";

option go_package = "/types/celestia";

// Blob (named after binary large object) is a chunk of data submitted by a user
// to be published to the Celestia blockchain. The data of a Blob is published
// to a namespace_id and is encoded into shares based on the format specified by
// share_version.
message Blob {
    bytes  namespace_id  = 1;
    bytes  data          = 2;
    uint32 share_version = 3;
}

// BlobTx wraps an encoded sdk.Tx with a second field to contain blobs of data.
// The raw bytes of the blobs are not signed over, instead we verify each blob
// using the relevant MsgPayForBlobs that is signed over in the encoded sdk.Tx.
message BlobTx {
    bytes         tx      = 1;
    repeated Blob blobs   = 2;
    string        type_id = 3;
}

// MsgPayForBlobs pays for the inclusion of a blob in the block.
message MsgPayForBlobs {
    // signer is the bech32 encoded signer address. See
    // https://en.bitcoin.it/wiki/Bech32.
    string signer = 1;
    // namespaces is a list of namespaces that the blobs are associated with. A
    // namespace is a byte slice of length 29 where the first byte is the
    // namespaceVersion and the subsequent 28 bytes are the namespaceId.
    repeated bytes namespaces = 2;
    // blob_sizes is a list of blob sizes (one per blob). Each size is in bytes.
    repeated uint32 blob_sizes = 3;
    // share_commitments is a list of share commitments (one per blob).
    repeated bytes share_commitments = 4;
    // share_versions are the versions of the share format that the blobs
    // associated with this message should use when included in a block. The
    // share_versions specified must match the share_versions used to generate the
    // share_commitment in this message.
    repeated uint32 share_versions = 8;
}

// Tx is the standard type used for broadcasting transactions.
message Tx {
  // body is the processable content of the transaction
  TxBody body = 1;

  // trailing bytes like auth info and signatures
  bytes trailing_bytes = 2;
}

// TxBody is the body of a transaction that all signers sign over.
message TxBody {
  // messages is a list of messages to be executed. The required signers of
  // those messages define the number and order of elements in AuthInfo's
  // signer_infos and Tx's signatures. Each required signer address is added to
  // the list only the first time it occurs.
  // By convention, the first required signer (usually from the first message)
  // is referred to as the primary signer and pays the fee for the whole
  // transaction.
  repeated google.protobuf.Any messages = 1;

  // trailing bytes with information that we don't care about. Like: memo, timeout_height, unordered etc.
  bytes trailing_bytes = 2;
}